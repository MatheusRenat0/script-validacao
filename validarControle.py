import pandas as pd
import os

# --- Configura√ß√£o dos Arquivos ---
# Altere os nomes dos arquivos se necess√°rio
arquivo_master = 'planilha_master.xlsx'
arquivo_validar = 'planilha_para_validar.xlsx'
arquivo_relatorio = 'relatorio_de_validacao.xlsx'

# Coluna que ser√° usada como chave para encontrar o funcion√°rio
# IMPORTANTE: Use um identificador √∫nico como 'Matr√≠cula' ou 'CPF' se poss√≠vel
coluna_chave = 'Nome do Funcion√°rio'
# ---------------------------------

def validar_planilhas():
    """
    Fun√ß√£o principal que carrega as planilhas, trata c√©lulas mescladas,
    compara os dados e gera um relat√≥rio com as diverg√™ncias.
    """
    # 1. VERIFICA√á√ÉO INICIAL
    # Verifica se os arquivos de entrada existem na pasta
    if not os.path.exists(arquivo_master) or not os.path.exists(arquivo_validar):
        print(f"Erro: Verifique se os arquivos '{arquivo_master}' e '{arquivo_validar}' est√£o na mesma pasta do script.")
        return

    print("Carregando planilhas...")
    # 2. CARREGAMENTO E LIMPEZA DOS DADOS
    # Carrega as planilhas
    df_master_raw = pd.read_excel(arquivo_master)
    df_validar_raw = pd.read_excel(arquivo_validar)

    # TRATAMENTO PARA C√âLULAS MESCLADAS:
    # O m√©todo 'ffill' (forward fill) preenche os valores vazios (NaN)
    # com o √∫ltimo valor v√°lido encontrado na mesma coluna.
    df_master_raw.ffill(inplace=True)
    df_validar_raw.ffill(inplace=True)

    # Converte todas as colunas para o tipo 'string' para evitar erros de formata√ß√£o
    # e preenche quaisquer c√©lulas restantes vazias com um texto vazio.
    df_master = df_master_raw.astype(str).fillna('')
    df_validar = df_validar_raw.astype(str).fillna('')
    
    # Lista para armazenar os erros encontrados
    erros = []

    print("Iniciando a valida√ß√£o de cada linha...")

    # 3. COMPARA√á√ÉO LINHA A LINHA
    # Itera sobre cada linha da planilha que queremos validar
    for index, row_validar in df_validar.iterrows():
        chave_valor = row_validar[coluna_chave]

        # Procura pelo mesmo funcion√°rio (usando a coluna_chave) na planilha master
        master_info = df_master[df_master[coluna_chave] == chave_valor]

        # Se o funcion√°rio n√£o foi encontrado na planilha master
        if master_info.empty:
            erros.append({
                coluna_chave: chave_valor,
                'Campo com Erro': 'Funcion√°rio',
                'Valor Esperado (Master)': 'N/A',
                'Valor Encontrado (Valida√ß√£o)': chave_valor,
                'Descri√ß√£o do Erro': f'Funcion√°rio "{chave_valor}" n√£o encontrado na planilha master.'
            })
            continue # Pula para o pr√≥ximo funcion√°rio

        # Se encontrou o funcion√°rio, faz a compara√ß√£o campo a campo
        master_info = master_info.iloc[0] # Pega a primeira ocorr√™ncia, caso haja duplicados

        # Compara√ß√µes (usamos .strip() para remover espa√ßos em branco no in√≠cio/fim)
        if row_validar['IMEI do Aparelho'].strip() != master_info['IMEI do Aparelho'].strip():
            erros.append({
                coluna_chave: chave_valor,
                'Campo com Erro': 'IMEI do Aparelho',
                'Valor Esperado (Master)': master_info['IMEI do Aparelho'],
                'Valor Encontrado (Valida√ß√£o)': row_validar['IMEI do Aparelho'],
                'Descri√ß√£o do Erro': 'O IMEI do aparelho n√£o corresponde ao registro master.'
            })

        if row_validar['N√∫mero da Linha'].strip() != master_info['N√∫mero da Linha'].strip():
            erros.append({
                coluna_chave: chave_valor,
                'Campo com Erro': 'N√∫mero da Linha',
                'Valor Esperado (Master)': master_info['N√∫mero da Linha'],
                'Valor Encontrado (Valida√ß√£o)': row_validar['N√∫mero da Linha'],
                'Descri√ß√£o do Erro': 'O n√∫mero da linha n√£o corresponde ao registro master.'
            })

        if row_validar['ICCID do Chip'].strip() != master_info['ICCID do Chip'].strip():
            erros.append({
                coluna_chave: chave_valor,
                'Campo com Erro': 'ICCID do Chip',
                'Valor Esperado (Master)': master_info['ICCID do Chip'],
                'Valor Encontrado (Valida√ß√£o)': row_validar['ICCID do Chip'],
                'Descri√ß√£o do Erro': 'O ICCID do chip (SIM Card) n√£o corresponde ao registro master.'
            })

    # 4. GERA√á√ÉO DO RELAT√ìRIO FINAL
    if not erros:
        print("\n--- Valida√ß√£o Conclu√≠da ---")
        print("‚úÖ Nenhuma diverg√™ncia encontrada. As planilhas est√£o consistentes!")
    else:
        print(f"\n--- Valida√ß√£o Conclu√≠da ---")
        print(f"‚ö†Ô∏è Foram encontradas {len(erros)} diverg√™ncias.")
        # Cria um DataFrame do pandas com a lista de erros
        df_erros = pd.DataFrame(erros)
        
        # Salva o DataFrame em um novo arquivo Excel
        df_erros.to_excel(arquivo_relatorio, index=False)
        print(f"üìÑ Um relat√≥rio detalhado foi salvo no arquivo: '{arquivo_relatorio}'")

# Executa a fun√ß√£o principal quando o script √© chamado
if __name__ == "__main__":
    validar_planilhas()